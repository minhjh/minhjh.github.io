<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World2222</title>
    <link href="/2019/10/10/hello-world2/"/>
    <url>/2019/10/10/hello-world2/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
      <category>go</category>
      
      <category>docker</category>
      
      <category>docker-compose</category>
      
      <category>kubernetes</category>
      
      <category>k8s-cluster</category>
      
      <category>java</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/10/10/hello-world/"/>
    <url>/2019/10/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/base64&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><br><span class="hljs-string">&quot;github.com/skip2/go-qrcode&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;https://minhjh.github.io/&quot;</span><br><span class="hljs-keyword">const</span> headerFormat = <span class="hljs-string">&quot;data:%s;base64,%s&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// qrcode.WriteFile(url, qrcode.Medium, 256, &quot;./blog_qrcode.png&quot;)</span><br><span class="hljs-comment">// customeQR()</span><br><br>b, err := ioutil.ReadFile(<span class="hljs-string">&quot;./blog_qrcode.png&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>s := base64.StdEncoding.EncodeToString(b)<br>s2 := fmt.Sprintf(headerFormat, <span class="hljs-string">&quot;image/png&quot;</span>, s)<br>fmt.Println(s2)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">customeQR</span><span class="hljs-params">()</span></span> &#123;<br>qr, err := qrcode.New(url, qrcode.Medium)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>qr.BackgroundColor = color.RGBA&#123;<span class="hljs-number">50</span>, <span class="hljs-number">12</span>, <span class="hljs-number">50</span>, <span class="hljs-number">12</span>&#125;<br>qr.ForegroundColor = color.White<br>qr.WriteFile(<span class="hljs-number">256</span>, <span class="hljs-string">&quot;./blog_qrcode.png&quot;</span>)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><span class="label label-primary">我是label</span><h4 id="勾选框">勾选框</h4>            <input type="checkbox" disabled checked="checked">text          <div>            <input type="checkbox" disabled checked="checked">text          </div><h4 id="按钮">按钮</h4><a class="btn" href="http://www.baidu.com"  title="我是title" target="_blank">我是百度</a><h4 id="组图">组图</h4><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><imgsrc="https://fluid-dev.github.io/hexo-fluid-docs/assets/img/group_image.c1b58381.png" /></div><div class="group-image-wrap"><imgsrc="https://t7.baidu.com/it/u=1595072465,3644073269&amp;fm=193&amp;f=GIF" /></div><div class="group-image-wrap"><imgsrc="https://t7.baidu.com/it/u=355704943,1318565630&amp;fm=193&amp;f=GIF" /></div></div><div class="group-image-row"><div class="group-image-wrap"><imgsrc="https://t7.baidu.com/it/u=655876807,3707807800&amp;fm=193&amp;f=GIF" /></div><div class="group-image-wrap"><imgsrc="https://t7.baidu.com/it/u=1423490396,3473826719&amp;fm=193&amp;f=GIF" /></div></div></div><h4 id="latex-数学公式">LaTeX 数学公式</h4><p><span class="math display">\[E=mc^2\]</span></p><p><span class="math display">\[\sqrt{x} + \sqrt{x^{2}+\sqrt{y}} =\sqrt[3]{k_{i}} - \frac{x}{m}\]</span></p><p><span class="math display">\[ \pm\; \times\; \div\; \cdot\; \cap\;\cup\; \geq\; \leq\; \neq\; \approx\; \equiv \]</span> More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="mermaid-流程图">Mermaid 流程图</h3><pre><code class="mermaid" >ganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram to mermaidsection A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des3, 5d</code></pre><pre><code class=" mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre><h2 id="参考">参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>参考资料1<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>参考资料2<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>a</category>
      
      <category>b</category>
      
      <category>c</category>
      
      <category>d</category>
      
      <category>f</category>
      
      <category>g</category>
      
      <category>h</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/10/10/k8s/hello-world/"/>
    <url>/2019/10/10/k8s/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/base64&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;image/color&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><br><span class="hljs-string">&quot;github.com/skip2/go-qrcode&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;https://minhjh.github.io/&quot;</span><br><span class="hljs-keyword">const</span> headerFormat = <span class="hljs-string">&quot;data:%s;base64,%s&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// qrcode.WriteFile(url, qrcode.Medium, 256, &quot;./blog_qrcode.png&quot;)</span><br><span class="hljs-comment">// customeQR()</span><br><br>b, err := ioutil.ReadFile(<span class="hljs-string">&quot;./blog_qrcode.png&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>s := base64.StdEncoding.EncodeToString(b)<br>s2 := fmt.Sprintf(headerFormat, <span class="hljs-string">&quot;image/png&quot;</span>, s)<br>fmt.Println(s2)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">customeQR</span><span class="hljs-params">()</span></span> &#123;<br>qr, err := qrcode.New(url, qrcode.Medium)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>qr.BackgroundColor = color.RGBA&#123;<span class="hljs-number">50</span>, <span class="hljs-number">12</span>, <span class="hljs-number">50</span>, <span class="hljs-number">12</span>&#125;<br>qr.ForegroundColor = color.White<br>qr.WriteFile(<span class="hljs-number">256</span>, <span class="hljs-string">&quot;./blog_qrcode.png&quot;</span>)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><span class="label label-primary">我是label</span><h4 id="勾选框">勾选框</h4>            <input type="checkbox" disabled checked="checked">text          <div>            <input type="checkbox" disabled checked="checked">text          </div><h4 id="按钮">按钮</h4><a class="btn" href="http://www.baidu.com"  title="我是title" target="_blank">我是百度</a><h4 id="组图">组图</h4><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><imgsrc="https://fluid-dev.github.io/hexo-fluid-docs/assets/img/group_image.c1b58381.png" /></div><div class="group-image-wrap"><imgsrc="https://t7.baidu.com/it/u=1595072465,3644073269&amp;fm=193&amp;f=GIF" /></div><div class="group-image-wrap"><imgsrc="https://t7.baidu.com/it/u=355704943,1318565630&amp;fm=193&amp;f=GIF" /></div></div><div class="group-image-row"><div class="group-image-wrap"><imgsrc="https://t7.baidu.com/it/u=655876807,3707807800&amp;fm=193&amp;f=GIF" /></div><div class="group-image-wrap"><imgsrc="https://t7.baidu.com/it/u=1423490396,3473826719&amp;fm=193&amp;f=GIF" /></div></div></div><h4 id="latex-数学公式">LaTeX 数学公式</h4><p><span class="math display">\[E=mc^2\]</span></p><p><span class="math display">\[\sqrt{x} + \sqrt{x^{2}+\sqrt{y}} =\sqrt[3]{k_{i}} - \frac{x}{m}\]</span></p><p><span class="math display">\[ \pm\; \times\; \div\; \cdot\; \cap\;\cup\; \geq\; \leq\; \neq\; \approx\; \equiv \]</span> More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="mermaid-流程图">Mermaid 流程图</h3><pre><code class="mermaid" >ganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram to mermaidsection A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des3, 5d</code></pre><pre><code class=" mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre><h2 id="参考">参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>参考资料1<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>参考资料2<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>a</category>
      
      <category>b</category>
      
      <category>c</category>
      
      <category>d</category>
      
      <category>f</category>
      
      <category>g</category>
      
      <category>h</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day%20copy%2012/"/>
    <url>/2015/07/09/js-module-7day%20copy%2012/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day%20copy%2014/"/>
    <url>/2015/07/09/js-module-7day%20copy%2014/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day%20copy%2015/"/>
    <url>/2015/07/09/js-module-7day%20copy%2015/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day%20copy%2010/"/>
    <url>/2015/07/09/js-module-7day%20copy%2010/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day%20copy%202/"/>
    <url>/2015/07/09/js-module-7day%20copy%202/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day%20copy%2013/"/>
    <url>/2015/07/09/js-module-7day%20copy%2013/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day%20copy%206/"/>
    <url>/2015/07/09/js-module-7day%20copy%206/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day%20copy%205/"/>
    <url>/2015/07/09/js-module-7day%20copy%205/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day%20copy%203/"/>
    <url>/2015/07/09/js-module-7day%20copy%203/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day%20copy%2011/"/>
    <url>/2015/07/09/js-module-7day%20copy%2011/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day%20copy%204/"/>
    <url>/2015/07/09/js-module-7day%20copy%204/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day%20copy%209/"/>
    <url>/2015/07/09/js-module-7day%20copy%209/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day%20copy%208/"/>
    <url>/2015/07/09/js-module-7day%20copy%208/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day%20copy%207/"/>
    <url>/2015/07/09/js-module-7day%20copy%207/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day/"/>
    <url>/2015/07/09/js-module-7day/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post using Keynote Layout</title>
    <link href="/2015/07/09/js-module-7day%20copy/"/>
    <url>/2015/07/09/js-module-7day%20copy/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下滑这里查看更多内容</p></blockquote><p>7月9日，我在公司内部进行了名为「JavaScript 模块化七日谈」分享，并将该Slides 分享到了微博上。出乎意料地，这篇微博先后被 <span class="citation"data-cites="JS小组">@JS小组</span> <span class="citation"data-cites="尤小右">@尤小右</span> <span class="citation"data-cites="寸志">@寸志</span> 等近 200 人转发，阅读达到10w，获得了还不错的评价。</p><p>于是，我决定将它重新发到我的博客上，并为它专门制作了适用于 Keynote展示文稿的新布局。它能自动根据屏幕大小/旋转以一定比例填充屏幕，你也可以直接点击下方链接在新页面打开，来获得更好的、沉浸式的全屏体验</p><h3 id="watch-slides"><a href="http://huangxuan.me/js-module-7day">WatchSlides →</a></h3><p><img src="http://huangxuan.me/js-module-7day/attach/qrcode.png" width="350" height="350"/></p><p><small class="img-hint">你也可以通过扫描二维码在手机上观看</small></p><p>这个 Web Slides 开源在<ahref="https://github.com/Huxpro/js-module-7day">我的 Github上</a>，欢迎你帮助我完善这个展示文稿，你可以给我提 issue，可以 fork&amp; pull request。如果它能帮助到你了，希望你还能不吝啬 star一下这个项目</p><h3 id="catalog">Catalog</h3><ul><li>第一日 上古时期 <strong><em>Module?</em></strong>从设计模式说起</li><li>第二日 石器时代 <strong><em>Script Loader</em></strong>只有封装性可不够，我们还需要加载</li><li>第三日 蒸汽朋克 <strong><em>Module Loader</em></strong>模块化架构的工业革命</li><li>第四日 号角吹响 <strong><em>CommonJS</em></strong>征服世界的第一步是跳出浏览器</li><li>第五日 双塔奇兵 <strong><em>AMD/CMD</em></strong>浏览器环境模块化方案</li><li>第六日 精灵宝钻 <strong><em>Browserify/Webpack</em></strong>大势所趋，去掉这层包裹！</li><li>第七日 王者归来 <strong><em>ES6 Module</em></strong> 最后的战役</li></ul><h3 id="thanks">Thanks</h3><p><a href="http://lab.hakim.se/reveal-js">Reveal.js</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post With Default Header Image</title>
    <link href="/2015/04/14/unix-linux-note/"/>
    <url>/2015/04/14/unix-linux-note/</url>
    
    <content type="html"><![CDATA[<blockquote><p>This document is not completed and will be updated anytime.</p></blockquote><h2 id="catagory">Catagory</h2><ol type="1"><li><a href="#unix">Unix</a><ol type="1"><li><a href="#bell-labs">Bell Labs</a></li><li><a href="#xenix">Xenix</a></li><li><a href="#bsd">BSD</a></li><li><a href="#freebsd--apple">FreeBSD &amp; Apple</a></li><li><a href="#nextstep">NeXTStep</a></li><li><a href="#darwin">Darwin</a></li><li><a href="#posix">POSIX</a></li></ol></li><li><a href="#unix-like">Unix-like</a><ol type="1"><li><a href="#single-unix-specification">Single UnixSpecification</a></li><li><a href="#apple-ios">Apple iOS</a></li><li><a href="#xnu-kernel">XNU Kernel</a></li></ol></li><li><a href="#linux">Linux</a><ol type="1"><li><a href="#linux-kernel">Linux Kernel</a></li><li><a href="#gnu-project">GNU Project</a></li><li><a href="#android">Android</a></li><li><a href="#android-kernel">Android Kernel</a></li><li><a href="#android-rom">Android ROM</a></li><li><a href="#chrome-os">Chrome OS</a></li><li><a href="#chromium-os">Chromium OS</a></li></ol></li></ol><hr /><h2 id="unix">Unix</h2><blockquote><p>Unix is a <strong>family</strong> of multitasking, multiuser computerOS.</p></blockquote><p>Derive from the original <strong>AT&amp;T Unix</strong>, Developed inthe 1970s at <strong>Bell Labs</strong> (贝尔实验室), initially intendedfor use inside the <strong>Bell System</strong>.</p><ul><li><h4 id="bell-labs">Bell Labs</h4>Bell 和 AT&amp;A 在那时已经是一家了，可以看到那时的通信公司真是一线 IT公司呢。 <strong>C 语言也是 Bell Labs的产物</strong>，从一开始就是为了用于 Unix 而设计出来的。所以 Unix （在73 年用 C 重写）在高校流行后，C 语言也获得了广泛支持。</li></ul><p>AT&amp;T licensed Unix to outside parties(第三方) from the late1970s, leading to a variety of both <strong>academic</strong>(最有有名的 BSD ) and <strong>commercial</strong> (Microsoft Xenix, IBMAIX, SunOS Solaris)</p><ul><li><h4 id="xenix">Xenix</h4><p>微软 1979 年从 AT&amp;A 授权来的 Unix OS，配合着 x86成为当时最受欢迎的 Unix 发行版。后来 M$ 和 IBM 合作开发 OS/2操作系统后放弃，后来最终转向 <strong>Windows NT</strong>。</p></li><li><h4 id="bsd">BSD</h4><p><strong>Barkeley Software Distribution</strong>, also called BerkeleyUnix. Today the term "BSD" is used to refer to any of the BSDdescendants(后代) which together form a branch of the family ofUnix-like OS.(共同组成了一个分支)</p><ul><li><strong>BSD 最大的贡献是在 BSD 中率先增加了虚拟存储器和 Internet协议</strong>，其 TCP/IP(IPv4 only) 代码仍然在现代 OS 上使用（ MicrosoftWindows and most of the foundation of Apple's OS X and iOS ）</li><li>BSD 后来发展出了众多开源后代，包括 FreeBSD, OpenBSD, NetBSD等等……很多闭源的 vendor Unix 也都从 BSD 衍生而来。</li></ul></li><li><h4 id="freebsd-apple">FreeBSD &amp; Apple</h4><p>FreeBSD 不但是 Open Source BSD 中占有率最高的，还直接影响了 Apple Inc: NeXT Computer 的团队在 FreeBSD 上衍生出了 NeXTSTEP操作系统，这货后来在 Apple 时期演化成了 <strong>Darwin</strong>，这个“达尔文”居然还是个开源系统，而且是 the Core of <strong>Mac OSX</strong> and <strong>iOS</strong>.</p></li><li><h4 id="nextstep">NeXTSTEP</h4><p>An <strong>object-oriented</strong>, multitasking OS. Low-level C butHigh-level OC language and runtime the first time, combined with an<strong>OO aplication layer</strong> and including several "kits".<br />大家都知道 NeXT 是 Steve Jobs 被 forced out of Apple 后和 a few of hiscoworkers 创办的，所以 <strong>NeXTSTEP 绝对是证明 Jobs实力的作品。</strong></p></li><li><h4 id="darwin">Darwin</h4><p><ahref="#darwin">Darwin</a>(http://en.wikipedia.org/wiki/Darwin_(operating_system)),the core set of components upon which Mac OS X and iOS based, mostlyPOSIX compatible, but has never, by itself, been certified as beingcompatible with any version of <strong>POSIX</strong>. (OS X, sinceLeopard, has been certified as compatible with the Single UNIXSpecification version 3)<br /><strong>所以说 Mac OS X 算是很正统 Unix 的了</strong></p></li><li><h4 id="posix">POSIX</h4><p>可移植操作系统接口, Portable Operating System Interface, is a familyof standards specified by the IEEE from maintaining compatibilitybetween OS, defines the API along with Command Line Shells and utilityinterfaces, for software comaptibility with variants of Unix and otherOS.</p><ul><li>Fully POSIX compliant:<ul><li>OS X</li><li>QNX OS (BlackBerry)</li></ul></li><li>Mostly complicant:<ul><li>Linux</li><li>OpenBSD/FreeBSD</li><li>Darwin (Core of <strong>iOS</strong> &amp; OS X)</li><li><strong>Android</strong></li></ul></li><li>Complicant via compatibility feature （通过兼容功能实现兼容）<ul><li>Windows NT Kernel<ul><li>Windows Server 2000, 2003, 2008, 2008 R2, 2012</li></ul></li><li>Symbian OS (with PIPS)<ul><li>Symbian was a closed-source OS.</li></ul></li></ul></li></ul></li></ul><hr /><h2 id="unix-like">Unix-like</h2><blockquote><p>A Unix-like (sometimes referred to as UN<em>X or </em>nix) operatingsystem is one that behaves in a manner similar to a Unix system, whilenot necessarily conforming to or being certified to any version of the<strong>Single UNIX Specification</strong>.</p></blockquote><p>There is no standard for defining the term.<br />其实 Unix-like 是个相对模糊的概念：</p><ul><li>最狭义的 Unix 单指 Bell Labs's Unix</li><li>稍广义的 Unix 指代所有 Licensed Unix, 即通过了 SUS 的 Unix-like，比如 OS X</li><li>最广义的 Unix 即所有 Unix-like 系统，无论它是否通过过任何 SUS，包括Linux，BSD Family 等</li></ul><h4 id="single-unix-specification">Single UNIX Specification</h4><p>The Single UNIX Specification (SUS) is the collective name of afamily of standards for computer OS, compliance with which is requiredto <strong>qualify for the name "Unix"</strong>, like<strong>POSIX</strong>.</p><h4 id="apple-ios">Apple iOS</h4><p>iOS is a <strong>Unix-like OS based on Darwin(BSD)</strong> and OS X,which share some frameworks including Core Foundation, Founadtion andthe Darwin foundation with OS X, but, Unix-like shell access is notavaliable for users and restricted for apps, <strong>making iOS notfully Unix-compatible either.</strong></p><p>The iOS kernal is <strong>XNU</strong>, the kernal of Darwin.</p><h4 id="xnu-kernel">XNU Kernel</h4><p>XNU, the acronym(首字母缩写) for <strong><em>X is NotUnix</em></strong>, which is the <strong>Computer OS Kernel</strong>developed at Apple Inc since Dec 1996 for use in the Mac OS X andreleased as free open source software as part of Darwin.</p><hr /><h2 id="linux">Linux</h2><blockquote><p>Linux is a Unix-like and mostly POSIX-compliant computer OS.</p></blockquote><figure><imgsrc="http://upload.wikimedia.org/wikipedia/commons/thumb/c/cd/Unix_timeline.en.svg/800px-Unix_timeline.en.svg.png"alt="Unix_timeline" /><figcaption aria-hidden="true">Unix_timeline</figcaption></figure><h4 id="linux-kernel">Linux Kernel</h4><p>严格来讲，术语 Linux 只表示 <ahref="http://en.wikipedia.org/wiki/Linux_kernel">Linux Kernel</a>操作系统内核本身，比如说 Android is Based on Linux (Kernel). Linus编写的也只是这一部分，一个免费的 Unix-like Kernel，并不属于 GNU Project的一部分。</p><p>但通常把 Linux 作为 Linux Kernel 与大量配合使用的 GNU ProjectSoftware Kit (包括 Bash, Lib, Compiler, 以及后期的 GUI etc) 所组合成的OS 的统称。（包括各类 Distribution 发行版）</p><p>这类操作系统也被称为 <strong>GNU/Linux</strong></p><h4 id="gnu-project">GNU Project</h4><p>The GNU Project is a <strong>free software, masscollaboration</strong> project, which based on the following freedomrights:</p><ul><li>Users are free to run the software, share (copy, distribute), studyand modify it.</li><li>GNU software guarantees these freedom-rights legally (via itslicense).</li><li>So it is not only FREE but, more important, FREEDOM.</li></ul><p>In order to ensure that the <em>entire</em> software of a computergrants its users all freedom rights (use, share, study, modify), eventhe most fundamental and important part, <strong>the operatingsystem</strong>, needed to be written.</p><p>This OS is decided to called <strong>GNU (a recursive acronym meaning"GNU is not Unix")</strong>. By 1992, the GNU Project had completed allof the major OS components except for their kernel, <em>GNUHurd</em>.</p><p>With the release of the third-party <strong>Linux Kernel</strong>,started independently by <em>Linus Torvalds</em> in 1991 and releasedunder the GPLv0.12 in 1992, for the first time it was possible to run anOS <strong>composed completely of free software</strong>.</p><p>Though the Linux kernel is not part of the GNU project, it wasdeveloped using GCC and other GNU programming tools and was released asfree software under the GPL.</p><p>Anyway, there eventually comes to the <strong>GNU/Linux</strong></p><ul><li><strong>GPL</strong>: GNU General Public License</li><li><strong>GCC</strong>: GNU Compiler Collection</li></ul><p>其他与 GPL 相关的自由/开源软件公共许可证：</p><ul><li><ahref="http://en.wikipedia.org/wiki/Mozilla_Public_License">MozillaPublic License</a></li><li><a href="http://en.wikipedia.org/wiki/MIT_License">MITLicense</a></li><li><a href="http://en.wikipedia.org/wiki/BSD_licenses">BSD PublicLicense</a><ul><li>GPL 强制后续版本必须是自由软件，而 BSD的后续可以选择继续开源或者封闭</li></ul></li><li><a href="http://en.wikipedia.org/wiki/Apache_License">ApacheLicense</a></li></ul><figure><imgsrc="http://dl2.iteye.com/upload/attachment/0047/4142/d770c85a-49b7-3c7f-8ae2-cbb6451e00d8.png"alt="Public License" /><figcaption aria-hidden="true">Public License</figcaption></figure><h4 id="android">Android</h4><p>Android is a mobile OS based on <strong>Linux Kernel</strong>, soit's definitely <strong>Unix-like</strong>.</p><p><strong>Linux is under GPL so Android has to be open source</strong>.Android's source code is released by Google under open source licenses,although most Android devices ultimately ship with a combination of opensource and proprietary software, including proprietary softwaredeveloped and licensed by Google <em>(GMS are all proprietary)</em></p><h4 id="android-kernel">Android Kernel</h4><p>Android's kernel is based on one of the Linux kernel's long-termsupport (LTS) branches.</p><p><strong>Android's variant of the Linux kernel</strong> has furtherarchitectural changes that are implemented by Google outside the typicalLinux kernel development cycle, and, certain features that Googlecontributed back to the Linux kernel. Google maintains a public coderepo that contains their experimental work to re-base Android off thelatest stable Linux versions.</p><p>Android Kernel 大概是 Linux Kernel 最得意的分支了，Android 也是 Linux最流行的发行版。不过，也有一些 Google 工程师认为 Android is not Linux inthe traditional Unix-like Linux distribution sense.总之这类东西就算有各种协议也还是很难说清楚，在我理解里 Android Kernel大概就是 fork Linux Kernel 之后改动和定制比较深的例子。</p><h4 id="android-rom">Android ROM</h4><p>既然提到 Android 就不得不提提 Android ROM</p><p>ROM 的本义实际上是只读内存：</p><p><strong>Read-only memory</strong> (ROM) is a class of storage mediumused in computers and other electronic devices. Data stored in ROM canonly be modified slowly, with difficulty, or not at all, so it is<strong>mainly used to distribute firmware (固件)</strong> (softwarethat is very closely tied to specific hardware, and unlikely to needfrequent updates).</p><p>ROM在发展的过程中不断进化，从只读演变成了可编程可擦除，并最终演化成了Flash</p><ul><li>PROM (Programmable read-only memory)</li><li>EPROM (Erasable programmable read-only memory)</li><li>EEPROM (Electrically erasable programmable read-only memory)<ul><li>Flash memory (闪存)</li></ul></li></ul><p>Flash 的出现是历史性的，它不但可以作为 ROM使用，又因其极高的读写速度和稳定性，先后发展成为U盘（USB flashdrives）、移动设备主要内置存储，和虐机械硬盘几条街的固态硬盘（SSD），可以说这货基本统一了高端存储市场的技术规格。</p><p>所以我们平时习惯说的 ROM 其实还是来源于老单片机时代，那时的 ROM真的是写了就很难（需要上电复位）、甚至无法修改，所以那时往 ROM里烧下去的程序就被称作 firmware，固件。久而久之，虽然技术发展了，固件仍然指代那些不常需要更新的软件，而ROM 这个词也就这么沿用下来了。</p><p>所以在 wiki 里是没有 Android ROM 这个词条的，只有 <ahref="http://en.wikipedia.org/wiki/List_of_custom_Android_firmwares">Listof custom Android firmwares</a></p><blockquote><p>A custom firmware, also known as a custom ROM, ROM, or custom OS, isan aftermarket distribution of the Android operating system. They arebased on the Android Open Source Project (AOSP), hence most areopen-sourced releases, unlike proprietary modifications by devicemanufacturers.</p></blockquote><p>各类 Android ROM 在 Android 词类下也都是属于 <strong>Forks anddistributions</strong> 一类的。</p><p>所以我说，其实各类 Android ROM 也好，fork Android 之流的YunOS、FireOS 也好，改了多少东西，碰到多深的 codebase ……<strong>其实 ROM和 Distribution OS 的界限是很模糊的</strong>，为什么 Android就不可以是移动时代的 Linux ，为什么 Devlik/ART 就不能是移动时代的 GCC呢？</p><h4 id="chrome-os">Chrome OS</h4><p>Chrome OS is an operating system based on the <strong>Linuxkernel</strong> and designed by Google to work with web applications andinstalled applications.</p><p>虽然目前只是个 Web Thin Client OS ，但是 RoadMap 非常酷……</p><ul><li><strong>Chrome Packaged Application</strong> (Support workingoffline and installed)</li><li><strong>Android App Runtime</strong> (run Android applicationsnatively...fxxking awesome)</li></ul><p>平复一下激动的心情，还是回到正题来：</p><h4 id="chromium-os">Chromium OS</h4><p>Chrome OS is based on Chromium OS, which is the open-sourcedevelopment version of Chrome OS, which is a <strong>Linuxdistribution</strong> designed by Google.</p><p>For Detail, Chromium OS based on <ahref="http://en.wikipedia.org/wiki/Gentoo_Linux">Gentoo Linux</a>,emm...</p>]]></content>
    
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>Unix</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post</title>
    <link href="/2014/09/22/js-version/"/>
    <url>/2014/09/22/js-version/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 有着很奇怪的命名史。</p><p>1995 年，它作为网景浏览器（NetscapeNavigator）的一部分首次发布，网景给这个新语言命名为LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了JavaScript <em>（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样—— 并没有什么关系）</em></p><p><img src="/img/js-version/javascript-java.jpg"alt="java-javascript" /><small class="img-hint">歪果仁的笑话怎么一点都不好笑</small></p><blockquote><p>译者注：<ahref="https://en.wikipedia.org/wiki/JavaScript#History">wikipedia 的JavaScript 词条</a> 更详细的叙述了这段历史</p></blockquote><p>1996 年，网景将 JavaScript 提交给 <ahref="http://www.ecma-international.org/">ECMAInternational（欧洲计算机制造商协会）</a>进行标准化，并最终确定出新的语言标准，它就是ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于JavaScript 名字的历史原因和市场原因（很显然 ECMAScript这个名字并不令人喜欢……），现实中我们只用 ECMAScript称呼标准，平时都还是使用 JavaScript 来称呼这个语言。</p><blockquote><p>术语（译者注）：</p><ul><li><em>标准（Standard）</em>： 用于定义与其他事物区别的一套规则</li><li><em>实现（Implementation）</em>： 某个标准的具体实施/真实实践</li></ul></blockquote><p>不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15年里，ECMAScript并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript3发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript5发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。</p><blockquote><p>译者注：<ahref="https://en.wikipedia.org/wiki/ECMAScript#4th_Edition_.28abandoned.29">ECMAScript第四版草案</a>由于太过激进而被抛弃，Adobe 的 <ahref="https://en.wikipedia.org/wiki/ActionScript">ActionScript 3.0</a>是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）</p></blockquote><p>到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE浏览器的支持，用 ECMAScript 5 (ES5)风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015年，负责制定 ECMAScript 规范草案的委员会 TC39决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）</p><p>目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 <ahref="https://github.com/wycats/javascript-decorators">decorators（装饰者）</a>，<ahref="https://github.com/lukehoban/ecmascript-asyncawait">async-await（async-await异步编程模型）</a> 和 <ahref="https://github.com/jeffmo/es-class-properties">static classproperties（静态类属性）</a>。它们通常被称为 ES7，ES2016 或者 ES.Next的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39把一个提案分为 4 个阶段，你可以在 <ahref="https://babeljs.io/docs/usage/experimental/">Babel 的官网</a>上查看各个提案目前都在哪个阶段了。</p><p>所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：</p><ul><li><strong>ECMAScript</strong>：一个由 ECMA International进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。</li><li><strong>JavaScript</strong>：ECMAScript标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。</li><li><strong>ECMAScript 5 (ES5)</strong>：ECMAScript 的第五版修订，于2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。</li><li><strong>ECMAScript 6 (ES6) / ECMAScript 2015(ES2015)</strong>：ECMAScript 的第六版修订，于 2015年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅<ahref="http://kangax.github.io/compat-table/es6/">这张兼容性表</a>来查看不同浏览器和工具的实现情况。</li><li><strong>ECMAScript 2016</strong>：预计的第七版 ECMAScript修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定</li><li><strong>ECMAScript Proposals</strong>：被考虑加入未来版本 ECMAScript标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及Finished （完成）。</li></ul><p>在这整个 Blog 中，我将把目前的 ECMAScript 版本称作ES6（因为这是大部分开发者最习以为常的），把明年的规范称作ES2016（因为，与 ES6/ES2015不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。</p><h4 id="一些资源">一些资源</h4><ul><li>TC39 的 <a href="https://github.com/tc39/ecma262">Github仓库</a>上可以看到所有目前公开的提案</li><li>如果你还不熟悉 ES6，Babel 有一个<ahref="https://babeljs.io/docs/learn-es2015/">很不错的特性概览</a></li><li>如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 <ahref="http://exploringjs.com/">Exploring ES6</a>和 Nicholas Zakas 的 <ahref="https://leanpub.com/understandinges6">Understanding ECMAScript6</a>。Axel 的博客 <a href="http://www.2ality.com/">2ality</a>也是很不错的 ES6 资源</li></ul><p><img class="shadow" width="320" src="/img/js-version/keep-calm-and-learn-javascript.png" /><small class="img-hint">来学 JavaScript 吧！</small></p><h4 id="著作权声明">著作权声明</h4><p>本文译自 <ahref="http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/">ES5,ES6, ES2016, ES.Next: What's going on with JavaScriptversioning?</a><br />译者 <a href="http://weibo.com/huxpro">黄玄</a>，首次发布于 <ahref="http://huangxuan.me">Hux Blog</a>，转载请保留以上链接</p>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
      <tag>翻译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Welcome to Hux Blog</title>
    <link href="/2014/01/29/hello-2015/"/>
    <url>/2014/01/29/hello-2015/</url>
    
    <content type="html"><![CDATA[<blockquote><p>“Yeah It's on. ”</p></blockquote><h2 id="前言">前言</h2><p>Hux 的 Blog 就这么开通了。</p><p><a href="#build">跳过废话，直接看技术实现</a></p><p>2015 年，Hux 总算有个地方可以好好写点东西了。</p><p>作为一个程序员， Blog这种轮子要是挂在大众博客程序上就太没意思了。一是觉得大部分 Blog服务都太丑，二是觉得不能随便定制不好玩。之前因为太懒没有折腾，结果就一直连个写Blog 的地儿都没有。</p><p>在玩了一段时间知乎之后，答题的快感又激起了我开博客的冲动。之前的<ahref="http://huangxuan.me/portfolio">个人网站</a>是作品集形式的（现在集成进来了），并不适合用来写博文，一不做二不休，花一天搞一个吧！</p><p id="build"></p><hr /><h2 id="正文">正文</h2><p>接下来说说搭建这个博客的技术细节。</p><p>正好之前就有关注过 <a href="https://pages.github.com/">GitHubPages</a> + <a href="http://jekyllrb.com/">Jekyll</a> 快速 Building Blog的技术方案，非常轻松时尚。</p><p>其优点非常明显：</p><ul><li><strong>Markdown</strong> 带来的优雅写作体验</li><li>非常熟悉的 Git workflow ，<strong>Git Commit 即 BlogPost</strong></li><li>利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机<ul><li>如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了</li></ul></li><li>Jekyll 的自定制非常容易，基本就是个模版引擎</li></ul><p>本来觉得最大的缺点可能是 GitHub在国内访问起来太慢，所以第二天一起床就到 GitCafe(Chinese GitHub Copy)迁移了一个<ahref="http://huxpro.gitcafe.io">镜像</a>出来，结果还是巨慢。</p><p>哥哥可是个前端好嘛！ 果断开 Chrome DevTool 查了下网络请求，原来是<strong>pending 在了 Google Fonts</strong>上，页面渲染一直被阻塞到请求超时为止，难怪这么慢。<br />忍痛割爱，只好把 Web Fonts 去了（反正超时看到的也只能是 fallback），果然一下就正常了，而且 GitHub 和 GitCafe对比并没有感受到明显的速度差异，虽然 github 的 ping值明显要高一些，达到了 300ms，于是用 DNSPOD 优化了一下速度。</p><hr /><p>配置的过程中也没遇到什么坑，基本就是 Git 的流程，相当顺手</p><p>大的 Jekyll 主题上直接 fork 了 CleanBlog（这个主题也相当有名，就不多赘述了。唯一的缺点大概就是没有标签支持，于是我给它补上了。）</p><p>本地调试环境需要 <code>gem install jekyll</code>，结果 rubygem的源居然被墙了……后来手动改成了我大淘宝的镜像源才成功</p><p>Theme 的 CSS 是基于 Bootstrap 定制的，看得不爽的地方直接在 Less里改就好了（平时更习惯 SCSS 些），<strong>不过其实我一直觉得 Bootstrap在移动端的体验做得相当一般，比我在淘宝参与的团队 CSS框架差多了……</strong>所以为了体验，也补了不少 CSS 进去</p><p>最后就进入了耗时反而最长的<strong>做图、写字</strong>阶段，也算是进入了<strong>写博客</strong>的正轨，因为是类似Hack Day 的方式去搭这个站的，所以折腾折腾着大半夜就过去了。</p><p>第二天考虑中文字体的渲染，fork 了 <ahref="http://www.typeisbeautiful.com/">Type is Beautiful</a> 的<code>font</code> CSS，调整了字号，适配了 Win的渣渲染，中英文混排效果好多了。</p><h2 id="后记">后记</h2><p>回顾这个博客的诞生，纯粹是出于个人兴趣。在知乎相关问题上回答并获得一定的star 后，我决定把这个博客主题当作一个小小的开源项目来维护。</p><p>在经历 v1.0 - v1.5 的蜕变后，这个博客主题愈发完整，不但增加了诸多 UI层的优化（opinionated）；在代码层面，更加丰富的配置项也使得这个主题拥有了更好的灵活性与可拓展性。而作为一个开源项目，我也积极的为其完善文档与解决issue。</p><p>如果你恰好逛到了这里，希望你也能喜欢这个博客主题。</p><p>—— Hux 后记于 2015.10</p>]]></content>
    
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Example Post with Code Highlight</title>
    <link href="/2013/05/25/js-module-loader/"/>
    <url>/2013/05/25/js-module-loader/</url>
    
    <content type="html"><![CDATA[<h2 id="foreword">Foreword</h2><blockquote><p>Here comes Module!</p></blockquote><p>随着网站逐渐变成「互联网应用程序」，嵌入网页的 JavaScript代码越来越庞大，越来越复杂。网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试……我们不得不使用软件工程的方法，来管理网页的业务逻辑。</p><p>于是，JavaScript 的模块化成为迫切需求。在 ES6 Module来临之前，JavaScript社区提供了强大支持，尝试在现有的运行环境下，实现模块的效果。</p><hr /><h2 id="catalog">Catalog</h2><ol type="1"><li><a href="#commonjs--node">CommonJS &amp; Node</a></li><li><a href="#history">History</a></li><li><a href="#requirejs--amd">RequireJS &amp; AMD</a></li><li><a href="#seajs--cmd">SeaJS &amp; CMD</a></li><li><a href="#amd-vs-cmd">AMD vs CMD</a></li><li><a href="#webpack">WebPack</a></li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">autoDetect</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;ye, it is written in JavaScript!&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="commonjs-node">CommonJS &amp; Node</h2><blockquote><p>Javascript: not just for browsers any more! —— CommonJS Slogen</p></blockquote><p>前端模块化的事实标准之一，2009 年 8 月，<ahref="http://wiki.commonjs.org/wiki/CommonJS">CommonJS</a> 诞生。</p><p>CommonJS 本质上只是一套规范（API 定义），而 Node.js采用并实现了部分规范，CommonJS Module 的写法也因此广泛流行。</p><p>让我们看看 Node 中的实现： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 由于 Node 原生支持模块的作用域，并不需要额外的 wrapper</span><br><span class="hljs-comment">// &quot;as though the module was wrapped in a function&quot;</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>)  <span class="hljs-comment">// 加载模块（同步加载）</span><br>a.<span class="hljs-title function_">doSomething</span>()         <span class="hljs-comment">// 等上一句执行完才会执行</span><br><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">b</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">// 暴露 b 函数接口</span><br>  <span class="hljs-comment">// do something</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p><code>exports</code>是一个内置对象，就像<code>require</code>是一个内置加载函数一样。如果你希望直接赋值一个完整的对象或者构造函数，覆写<code>module.exports</code>就可以了。</p><p>CommonJS 前身叫 ServerJS ，<strong>后来希望能更加COMMON，成为通吃各种环境的模块规范，改名为 CommonJS</strong> 。CommonJS最初只专注于 Server-side而非浏览器环境，因此它采用了同步加载的机制，这对服务器环境（硬盘 I/O速度）不是问题，而对浏览器环境（网速）来说并不合适。</p><p>因此，各种适用于浏览器环境的模块框架与标准逐个诞生，他们的共同点是：</p><ul><li>采用异步加载（预先加载所有依赖的模块后回调执行，符合浏览器的网络环境）</li><li>虽然代码风格不同，但其实都可以看作 CommonJS Modules语法的变体。</li><li>都在向着 <strong>COMMON</strong>的方向进化：<strong>兼容不同风格，兼容浏览器和服务器两种环境</strong></li></ul><p>本文接下来要讨论的典例是：</p><ul><li>RequireJS &amp; AMD（异步加载，预执行，依赖前置。默认推荐 AMD写法）</li><li>SeaJS &amp; CMD（异步加载，懒执行，依赖就近，默认推荐 CommonJS写法）</li></ul><h2 id="history">History</h2><!--<h2 id="history"> History </h2>--><blockquote><p>此段落参考自玉伯的 <ahref="https://github.com/seajs/seajs/issues/588">前端模块化开发那点历史</a></p></blockquote><p>09-10 年间，CommonJS（那时还叫 ServerJS） 社区推出 <ahref="http://wiki.commonjs.org/wiki/Modules">Modules/1.0</a>规范，并且在 Node.js 等环境下取得了很不错的实践。</p><p>09年下半年这帮充满干劲的小伙子们想把 ServerJS的成功经验进一步推广到浏览器端，于是将社区改名叫 CommonJS，同时激烈争论Modules 的下一版规范。分歧和冲突由此诞生，逐步形成了三大流派：</p><ol type="1"><li><strong>Modules/1.x</strong> 流派。这个观点觉得 1.x规范已经够用，只要移植到浏览器端就好。要做的是新增 <ahref="http://wiki.commonjs.org/wiki/Modules/Transport">Modules/Transport</a>规范，即在浏览器上运行前，先通过转换工具将模块转换为符合 Transport规范的代码。主流代表是服务端的开发人员。现在值得关注的有两个实现：越来越火的component 和走在前沿的 es6 module transpiler。</li><li><strong>Modules/Async</strong>流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x规范。这个观点下的典型代表是 <ahref="http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition">AMD</a>规范及其实现 <ahref="http://requirejs.org/">RequireJS</a>。这个稍后再细说。</li><li><strong>Modules/2.0</strong>流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x规范，但应该尽可能与 Modules/1.x 规范保持一致。这个观点下的典型代表是BravoJS 和 FlyScript 的作者。BravoJS 作者对 CommonJS的社区的贡献很大，这份 Modules/2.0-draft 规范花了很多心思。FlyScript的作者提出了 Modules/Wrappings 规范，这规范是 CMD 规范的前身。可惜的是BravoJS 太学院派，FlyScript后来做了自我阉割，将整个网站（flyscript.org）下线了。这个观点在本文中的典型代表就是SeaJS 和 CMD 了</li></ol><p>补一嘴：阿里 KISSY 的 KMD 其实跟 AMD 非常类似，只是用<code>add</code>和<code>use</code> 两个源自于 YUI Modules 的函数名替换了<code>define</code> 和 <code>require</code> ，但其原理更接近 RequireJS，与 YUI Modules 的 <code>Y</code> 沙箱 Attach 机制并不相同</p><h2 id="requirejs-amd">RequireJS &amp; AMD</h2><p><ahref="http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition">AMD(Async Module Definition)</a> 是 RequireJS在推广过程中对模块定义的规范化产出。</p><blockquote><p>RequireJS is a JavaScript file and module loader. It is optimized forin-browser use, but it can be used in other JavaScript environments</p></blockquote><p>RequireJS 主要解决的还是 CommonJS 同步加载脚本不适合浏览器这个问题：</p><script src="//gist.github.com/65481dbbf6d16e831a6cc89c3e37e6e5.js?file=display-emails-from-database.php"></script><blockquote><p>As the comment indicates above, if require() is async, this code willnot work. However, loading scripts synchronously in the browser killsperformance. So, what to do?</p></blockquote><p>所以我们需要 <strong>Function Wrapping</strong>来获取依赖并且提前通过 script tag 提前加载进来</p><iframe scrolling="no" width="[width]" height="[height]" src="https://jsfiddle.net/shorttag/embedded/[tabs]/[skin]" frameborder="0" loading="lazy" allowfullscreen></iframe><p>当依赖模块非常多时，这种<strong>依赖前置</strong>的写法会显得有点奇怪，所以AMD 给了一个语法糖， <strong>simplified CommonJSwrapping</strong>，借鉴了 CommonJS 的 require 就近风格，也更方便对CommonJS 模块的兼容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">require</span></span>) &#123;<br>    <span class="hljs-keyword">var</span> dependency1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;dependency1&#x27;</span>),<br>        dependency2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;dependency2&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><p>The AMD loader will parse out the <code>require('')</code> calls byusing <code>Function.prototype.toString()</code>, then internallyconvert the above define call into this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>([<span class="hljs-string">&#x27;require&#x27;</span>, <span class="hljs-string">&#x27;dependency1&#x27;</span>, <span class="hljs-string">&#x27;dependency2&#x27;</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">require</span></span>) &#123;<br>    <span class="hljs-keyword">var</span> dependency1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;dependency1&#x27;</span>),<br>        dependency2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;dependency2&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><p>出于<code>Function.prototype.toString()</code>兼容性和性能的考虑，最好的做法还是做一次<strong>optimized build</strong></p><p>AMD 和 CommonJS 的核心争议如下：</p><h3 id="执行时机">1. <strong>执行时机</strong></h3><p>Modules/1.0:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./a&quot;</span>) <span class="hljs-comment">// 执行到此时，a.js 才同步下载并执行</span><br></code></pre></td></tr></table></figure><p>AMD: （使用 require 的语法糖时）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(<span class="hljs-params">[<span class="hljs-string">&quot;require&quot;</span>],<span class="hljs-keyword">function</span>(<span class="hljs-built_in">require</span>)</span>)&#123;<br>    <span class="hljs-comment">// 在这里，a.js 已经下载并且执行好了</span><br>    <span class="hljs-comment">// 使用 require() 并不是 AMD 的推荐写法</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./a&quot;</span>) <span class="hljs-comment">// 此处仅仅是取模块 a 的 exports</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>AMD 里提前下载 a.js是出于对浏览器环境的考虑，只能采取异步下载，这个社区都认可（Sea.js也是这么做的）</p><p>但是 AMD 的执行是 Early Executing，而 Modules/1.0 是第一次 require时才执行。这个差异很多人不能接受，包括持 Modules/2.0观点的人也不能接受。</p><h3 id="书写风格">2. <strong>书写风格</strong></h3><p>AMD推荐的风格并不使用<code>require</code>，而是通过参数传入，破坏了<strong>依赖就近</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>],<span class="hljs-keyword">function</span>(<span class="hljs-params">a, b, c</span>)&#123;<br>    <span class="hljs-comment">// 提前申明了并初始化了所有模块</span><br><br>    <span class="hljs-literal">true</span> || b.<span class="hljs-title function_">foo</span>(); <span class="hljs-comment">//即便根本没用到模块 b，但 b 还是提前执行了。</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>不过，在笔者看来，风格喜好因人而异，主要还是<strong>预执行</strong>和<strong>懒执行</strong>的差异。</p><p>另外，require 2.0也开始思考异步处理<strong>软依赖</strong>（区别于一定需要的<strong>硬依赖</strong>）的问题，提出了这样的方案：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数体内：</span><br><span class="hljs-keyword">if</span>(status)&#123;<br>    <span class="hljs-title function_">async</span>([<span class="hljs-string">&#x27;a&#x27;</span>],<span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>)&#123;<br>        a.<span class="hljs-title function_">doSomething</span>()<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="seajs-cmd">SeaJS &amp; CMD</h2><p>CMD (Common Module Definition) 是 <ahref="http://seajs.org/docs/">SeaJS</a>在推广过程中对模块定义的规范化产出，是 Modules/2.0 流派的支持者，因此SeaJS 的模块写法尽可能与 Modules/1.x 规范保持一致。</p><p>不过目前国外的该流派都死得差不多了，RequireJS目前成为浏览器端模块的事实标准，国内最有名气的就是玉伯的 Sea.js，不过对国际的推广力度不够。</p><ul><li>CMD Specification<ul><li><ahref="https://github.com/cmdjs/specification/blob/master/draft/module.md">English(CMDJS-repo)</a></li><li><a href="https://github.com/seajs/seajs/issues/242">Chinese(SeaJS-repo)</a></li></ul></li></ul><p>CMD 主要有 define, factory, require, export 这么几个东西</p><ul><li>define <code>define(id?, deps?, factory)</code></li><li>factory <code>factory(require, exports, module)</code></li><li>require <code>require(id)</code></li><li>exports <code>Object</code></li></ul><p>CMD 推荐的 Code Style 是使用 CommonJS 风格的<code>require</code>：</p><ul><li>这个 require实际上是一个全局函数，用于加载模块，这里实际就是传入而已</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span></span>) &#123;<br><br>    <span class="hljs-comment">// 获取模块 a 的接口</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>);<br>    <span class="hljs-comment">// 调用模块 a 的方法</span><br>    a.<span class="hljs-title function_">doSomething</span>();<br><br>    <span class="hljs-comment">// 对外提供 foo 属性</span><br>    <span class="hljs-built_in">exports</span>.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;bar&#x27;</span>;<br>    <span class="hljs-comment">// 对外提供 doSomething 方法</span><br>    <span class="hljs-built_in">exports</span>.<span class="hljs-property">doSomething</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;;<br><br>&#125;);<br></code></pre></td></tr></table></figure><p>但是你也可以使用 AMD 风格，或者使用 return 来进行模块暴露</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;hello&#x27;</span>, [<span class="hljs-string">&#x27;jquery&#x27;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;<br><br>    <span class="hljs-comment">// 模块代码...</span><br><br>    <span class="hljs-comment">// 直接通过 return 暴露接口</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>        <span class="hljs-attr">doSomething</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br>    &#125;;<br><br>&#125;);<br></code></pre></td></tr></table></figure><p>Sea.js 借鉴了 RequireJS 的不少东西，比如将 FlyScript 中的module.declare 改名为 define 等。Sea.js 更多地来自 Modules/2.0的观点，但尽可能去掉了学院派的东西，加入了不少实战派的理念。</p><h2 id="amd-vs-cmd">AMD vs CMD</h2><p><strong>虽然两者目前都兼容各种风格，但其底层原理并不相同，从其分别推荐的写法就可以看出两者背后原理的不同：</strong></p><ol type="1"><li>对于依赖的模块，AMD 是<strong>提前执行</strong>，CMD是<strong>懒执行</strong>。（都是先加载）</li></ol><ul><li>CMD 推崇<strong>依赖就近</strong>，AMD推崇<strong>依赖前置</strong>。</li></ul><p>看代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// AMD 默认推荐</span><br><br><span class="hljs-title function_">define</span>([<span class="hljs-string">&#x27;./a&#x27;</span>, <span class="hljs-string">&#x27;./b&#x27;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;  <span class="hljs-comment">// 依赖前置，提前执行</span><br><br>    a.<span class="hljs-title function_">doSomething</span>()<br>    b.<span class="hljs-title function_">doSomething</span>()<br><br>&#125;)<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// CMD</span><br><br><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;<br><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>)<br>    a.<span class="hljs-title function_">doSomething</span>()<br><br>    <span class="hljs-keyword">var</span> b = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./b&#x27;</span>) <span class="hljs-comment">// 依赖就近，延迟执行</span><br>    b.<span class="hljs-title function_">doSomething</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="webpack">WebPack</h2><blockquote><p>working...</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>前端开发</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
